#!/usr/bin/env python
# Software License Agreement (BSD License)
#
# Copyright (c) 2008, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of Willow Garage, Inc. nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#


## remap a tf topic

import rospy
from tf.msg import tfMessage

def load_rosparam(param_name, default_value):
    if rospy.has_param(param_name):
        value = rospy.get_param(param_name)
        print("Parameter ", param_name, "found: ", value)
        return value
    else:
        print("Parameter ", param_name, " not found, setting default value: ", default_value)
        return default_value

DELETE_PLACEHOLDER = "__delete__"

class TfRemapper:
    def __init__(self):

        self.new_tf_topic_name = load_rosparam('~new_tf_topic_name', '/tf')
        self.old_tf_topic_name = load_rosparam('~old_tf_topic_name', '/tf_old')
        self.is_bidirectional = load_rosparam('~is_bidirectional', False)

        mappings = rospy.get_param('~mappings', [])

        self.pub = rospy.Publisher(self.new_tf_topic_name, tfMessage, queue_size=1)
        if self.is_bidirectional:
            self.old_pub = rospy.Publisher(self.old_tf_topic_name, tfMessage, queue_size=1)
        else:
            self.old_pub = None

        self.mappings = {}
        self.reverse_mappings = {}
        
        for i in mappings:
            if "old" in i and "new" in i:
                self.mappings[i["old"]] = i["new"]
                self.reverse_mappings[i["new"]] = i["old"]

        print "Applying the following mappings to incoming tf frame ids", self.mappings
        rospy.Subscriber(self.old_tf_topic_name, tfMessage, self.callback)
        if self.is_bidirectional:
            rospy.Subscriber(self.new_tf_topic_name, tfMessage, self.callback_new)

    def callback(self, tf_msg):
        if tf_msg._connection_header['callerid'] == rospy.get_name():
            return

        to_delete = set()
        for transform in tf_msg.transforms:
            if transform.header.frame_id in self.mappings:
                if self.mappings[transform.header.frame_id] == DELETE_PLACEHOLDER:
                    to_delete.add(transform)
                else:
                    transform.header.frame_id = self.mappings[transform.header.frame_id]
            if transform.child_frame_id  in self.mappings:
                if self.mappings[transform.child_frame_id] == DELETE_PLACEHOLDER:
                    to_delete.add(transform)
                else:
                    transform.child_frame_id = self.mappings[transform.child_frame_id]
        for transform in to_delete:
            tf_msg.transforms.remove(transform)
                
        self.pub.publish(tf_msg)

    def callback_new(self, tf_msg):
        if tf_msg._connection_header['callerid'] == rospy.get_name():
            return

        for transform in tf_msg.transforms:
            if transform.header.frame_id in self.reverse_mappings:
                transform.header.frame_id = self.reverse_mappings[transform.header.frame_id]
            if transform.child_frame_id in self.reverse_mappings:
                transform.child_frame_id = self.reverse_mappings[transform.child_frame_id]

        self.pub_old.publish(tf_msg)

def remap_tf():
    
    pub.publish(Empty())

        
if __name__ == '__main__':
    rospy.init_node('tf_remapper')
    tfr = TfRemapper()
    rospy.spin()
