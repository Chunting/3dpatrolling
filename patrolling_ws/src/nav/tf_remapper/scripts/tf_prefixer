#!/usr/bin/env python
# Software License Agreement (BSD License)
#
# Copyright (c) 2008, Willow Garage, Inc.
# Copyright (c) 2017, TRADR Project
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of Willow Garage, Inc. nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#


"""
This node prefixes all TF frames with ~prefix, except those topics specified in ~blacklist.
"""

import rospy
from tf.msg import tfMessage

def load_rosparam(param_name, default_value):
    if rospy.has_param(param_name):
        value = rospy.get_param(param_name)
        rospy.loginfo("Parameter %s found: %s" % (param_name, value))
        return value
    else:
        rospy.loginfo("Parameter %s not found, setting default value: %s" % (param_name, default_value))
        return default_value

class TfPrefixer:
    def __init__(self):

        self.new_tf_topic_name = load_rosparam('~new_tf_topic_name', '/tf')
        self.old_tf_topic_name = load_rosparam('~old_tf_topic_name', '/tf_old')

        self.prefix = load_rosparam('~prefix', 'remapped/')
        if self.prefix.startswith('/'):
            if len(self.prefix) > 1:
                rospy.logwarn("TF names cannot start with / anymore, removing it from prefix '%s'" % self.prefx)
                self.prefix = self.prefix[1:]
            else:
                rospy.logerr("Prefix cannot be just '/' .")
                raise RuntimeError()

        self.blacklist = rospy.get_param('~blacklist', [])
        rospy.logwarn(self.blacklist)
        
        self.blacklist_not_resend = rospy.get_param('~blacklist_not_resend', [])
        rospy.logwarn(self.blacklist_not_resend)

        self.pub = rospy.Publisher(self.new_tf_topic_name, tfMessage, queue_size=1)

        rospy.Subscriber(self.old_tf_topic_name, tfMessage, self.callback)

    @staticmethod
    def remove_leading_slash(name):
        if name[0] == '/':
            return name[1:]
        return name

    def callback(self, tf_msg):
        for transform in tf_msg.transforms:
            if transform.header.frame_id not in self.blacklist_not_resend:
                if transform.header.frame_id not in self.blacklist:
                    transform.header.frame_id = self.prefix + self.remove_leading_slash(transform.header.frame_id)
                if transform.child_frame_id not in self.blacklist:
                    transform.child_frame_id = self.prefix + self.remove_leading_slash(transform.child_frame_id)
                
        self.pub.publish(tf_msg)

if __name__ == '__main__':
    rospy.init_node('tf_prefixer')
    tfr = TfPrefixer()
    rospy.spin()
